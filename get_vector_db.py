# get_vector_db.py
# -----------------------------------------------------------
# Charge les embeddings stock√©s dans data/chunks_with_embeddings.json
# puis les ins√®re dans Qdrant (en lots) apr√®s avoir recr√©√© la collection.
# -----------------------------------------------------------

import json
from qdrant_client import QdrantClient
from qdrant_client.http.models import Distance, VectorParams, PointStruct

# -----------------------------------------------------------
# 1Ô∏è‚É£ Charger les donn√©es avec embeddings
# -----------------------------------------------------------
input_file = "data/chunks_with_embeddings.json"
with open(input_file, "r", encoding="utf-8") as f:
    data = json.load(f)

if not data:
    raise ValueError("‚ùå Aucun embedding trouv√© dans le fichier JSON.")

# Dimension automatique
VECTOR_DIM = len(data[0]["embedding"])
print(f"üìè Dimension d√©tect√©e des vecteurs¬†: {VECTOR_DIM}")

# -----------------------------------------------------------
# 2Ô∏è‚É£ Connexion Qdrant
# -----------------------------------------------------------
client = QdrantClient(host="localhost", port=6333)

# -----------------------------------------------------------
# 3Ô∏è‚É£ Cr√©ation (ou recr√©ation) de la collection
# -----------------------------------------------------------
COLLECTION_NAME = "psybot-embedding"

if client.collection_exists(COLLECTION_NAME):
    print(f"‚ö° La collection {COLLECTION_NAME} existe d√©j√†. Suppression‚Ä¶")
    client.delete_collection(COLLECTION_NAME)

print(f"üü£ Cr√©ation de la collection {COLLECTION_NAME}")
client.create_collection(
    collection_name=COLLECTION_NAME,
    vectors_config=VectorParams(size=VECTOR_DIM, distance=Distance.COSINE)
)

# -----------------------------------------------------------
# 4Ô∏è‚É£ Pr√©paration des points
# -----------------------------------------------------------
points = [
    PointStruct(
        id=idx,
        vector=item["embedding"],
        payload={"page_content": item["page_content"]}
    )
    for idx, item in enumerate(data)
]
print(f"üî¢ Total points √† ins√©rer¬†: {len(points)}")

# -----------------------------------------------------------
# 5Ô∏è‚É£ Insertion par lots pour √©viter 'Payload too large'
# -----------------------------------------------------------
def batch_insert(client, collection_name, all_points, batch_size=200):
    total = len(all_points)
    for start in range(0, total, batch_size):
        batch = all_points[start : start + batch_size]
        end = start + len(batch) - 1
        print(f"‚û° Inserting points {start} to {end}")
        client.upsert(collection_name=collection_name, points=batch)

batch_insert(client, COLLECTION_NAME, points)

print("‚úÖ Qdrant est pr√™t et op√©rationnel.")
